import plotly.graph_objects as go
import duckdb

def draw_sankey_with_node_types(lineage_csv, asset_csv):
    # Step 1: Query to fetch nodes, links, and node types
    query_nodes = """
    WITH Nodes AS (
        SELECT DISTINCT
            src.Asset_Name || ' (' || l.Source_Asset_ID || ')' AS Node_Name,
            'Asset' AS Node_Type
        FROM read_csv_auto(?) AS l
        LEFT JOIN read_csv_auto(?) AS src ON l.Source_Asset_ID = src.Asset_ID
        UNION
        SELECT DISTINCT
            tgt.Asset_Name || ' (' || l.Target_Asset_ID || ')' AS Node_Name,
            'Asset' AS Node_Type
        FROM read_csv_auto(?) AS l
        LEFT JOIN read_csv_auto(?) AS tgt ON l.Target_Asset_ID = tgt.Asset_ID
        UNION
        SELECT DISTINCT
            l.Data_Feed_Name AS Node_Name,
            'Data_Feed' AS Node_Type
        FROM read_csv_auto(?) AS l
    )
    SELECT * FROM Nodes;
    """

    query_links = """
    SELECT 
        src.Asset_Name || ' (' || l.Source_Asset_ID || ')' AS Source_Node,
        l.Data_Feed_Name AS Intermediate_Node,
        tgt.Asset_Name || ' (' || l.Target_Asset_ID || ')' AS Target_Node
    FROM 
        read_csv_auto(?) AS l
    LEFT JOIN 
        read_csv_auto(?) AS src ON l.Source_Asset_ID = src.Asset_ID
    LEFT JOIN 
        read_csv_auto(?) AS tgt ON l.Target_Asset_ID = tgt.Asset_ID;
    """
    
    # Step 2: Execute the queries
    conn = duckdb.connect()
    nodes = conn.execute(query_nodes, (lineage_csv, asset_csv, lineage_csv, asset_csv, lineage_csv)).fetchall()
    links = conn.execute(query_links, (lineage_csv, asset_csv, asset_csv)).fetchall()

    # Step 3: Prepare node and link data
    node_labels = [row[0] for row in nodes]
    node_types = [row[1] for row in nodes]
    node_indices = {label: idx for idx, label in enumerate(node_labels)}

    # Define colors based on node type
    node_colors = ['lightblue' if node_type == 'Asset' else 'lightgreen' for node_type in node_types]

    # Process links
    sources = []
    targets = []
    for source, intermediate, target in links:
        sources.append(node_indices[source])
        targets.append(node_indices[intermediate])  # Source → Intermediate (Data Feed)
        sources.append(node_indices[intermediate])
        targets.append(node_indices[target])        # Intermediate → Target

    # Step 4: Create the Sankey diagram
    fig = go.Figure(data=[go.Sankey(
        node=dict(
            pad=15,
            thickness=20,
            label=node_labels,
            color=node_colors
        ),
        link=dict(
            source=sources,
            target=targets,
            value=[1] * len(sources),  # Default weight 1 for simplicity
            color="rgba(200,200,200,0.6)"  # Gray links
        )
    )])

    # Layout adjustments
    fig.update_layout(
        title_text="Sankey Diagram with Node Types and Colors",
        font_size=12
    )

    fig.show()

# Example usage
lineage_csv = 'lineage_data.csv'
asset_csv = 'asset_data.csv'
draw_sankey_with_node_types(lineage_csv, asset_csv)
