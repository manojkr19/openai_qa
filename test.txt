import duckdb
import pandas as pd
from pyvis.network import Network

def create_network_html(file_path: str, params: dict = None) -> str:
    # Connect to DuckDB in-memory
    con = duckdb.connect(database=':memory:')
    
    # Create a table from the CSV file
    con.execute(f"""
        CREATE TABLE data AS
        SELECT * FROM read_csv_auto('{file_path}', header=True);
    """)

    table_name = 'data'

    # Extract distinct system nodes
    df_systems = con.execute(f"""
        SELECT source_system_id as system_id, source_system_name as system_name, source_system_type as system_type
        FROM {table_name}
        UNION
        SELECT target_system_id as system_id, target_system_name as system_name, target_system_type as system_type
        FROM {table_name}
    """).df()

    # Extract distinct feed nodes
    df_feeds = con.execute(f"""
        SELECT DISTINCT feedname
        FROM {table_name}
    """).df()

    # Edges: source_system -> feed, feed -> target_system
    df_edges_source_to_feed = con.execute(f"""
        SELECT DISTINCT source_system_id AS source, feedname AS target 
        FROM {table_name}
    """).df()

    df_edges_feed_to_target = con.execute(f"""
        SELECT DISTINCT feedname AS source, target_system_id AS target
        FROM {table_name}
    """).df()

    # Create the network
    net = Network(notebook=False, directed=True, height="800px", width="100%",select_menu=True)

    # Add system nodes (shape='dot')
    system_ids = set()
    for _, row in df_systems.iterrows():
        if row['system_id'] not in system_ids:
            # Determine group from system_type
            group = row['system_type']
            net.add_node(
                row['system_id'],
                label=row['system_name'],
                shape='dot',
                size=30,
                font={"vadjust": 0},
                group=group
            )
            system_ids.add(row['system_id'])

    # Add feed nodes (shape='box')
    feed_ids = set()
    for _, row in df_feeds.iterrows():
        if row['feedname'] not in feed_ids:
            net.add_node(
                row['feedname'],
                label=row['feedname'],
                shape="box",
                font={"vadjust": 25},
                group="feed"
            )
            feed_ids.add(row['feedname'])

    # Add edges
    for _, row in df_edges_source_to_feed.iterrows():
        net.add_edge(row['source'], row['target'], arrows="to")

    for _, row in df_edges_feed_to_target.iterrows():
        net.add_edge(row['source'], row['target'], arrows="to")

    # Set hierarchical layout, pastel colors, and cubicBezier edges
    net.set_options('''
    {
      "edges": {
        "smooth": {
          "enabled": true,
          "type": "cubicBezier",
          "forceDirection": "horizontal",
          "roundness": 0.5
        },
        "arrows": {
          "to": {
            "enabled": true,
            "type": "arrow",
            "scaleFactor": 0.5
          }
        }
      },
      "layout": {
        "hierarchical": {
          "enabled": true,
          "direction": "LR",
          "sortMethod": "directed",
          "levelSeparation": 200,
          "nodeSpacing": 200,
          "treeSpacing": 200
        }
      },
      "groups": {
        "origin_system": {
          "color": {
            "background": "#A7DB8D",
            "border": "#6FA25D"
          }
        },
        "intermediate_system": {
          "color": {
            "background": "#FFF2B8",
            "border": "#D8C978"
          }
        },
        "final_system": {
          "color": {
            "background": "#F9C2D1",
            "border": "#D693A9"
          }
        },
        "feed": {
          "color": {
            "background": "#B8E0F2",
            "border": "#7AB1CC"
          }
        }
      }
    }
    ''')

    # Return the HTML string
    html_str = net.generate_html()
    return html_str
# Example usage:
html_content = create_network_html('data.csv')
with open('complex_systems_feeds_circles_spline.html', 'w', encoding='utf-8') as f:
    f.write(html_content)
